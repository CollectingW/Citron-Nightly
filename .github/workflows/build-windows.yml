name: Build Citron (Windows)
concurrency:
  group: build-windows-nightly-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: "0 12 * * *"
  workflow_dispatch: {}

jobs:
  check-version:
    name: Check if new version available
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.compare.outputs.should_build }}
      new_hash: ${{ steps.upstream.outputs.hash }}
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Get upstream commit hash
        id: upstream
        run: |
          HASH=$(git ls-remote https://git.citron-emu.org/citron/emulator.git HEAD | cut -f1 | cut -c1-7)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          echo "Upstream hash: $HASH"

      - name: Get last built version
        id: last_built
        run: |
          LAST_HASH=$(cat LATEST_VERSION | tr -d '\n' || echo "none")
          echo "last_hash=$LAST_HASH" >> $GITHUB_OUTPUT
          echo "Last built hash: $LAST_HASH"

      - name: Check if release exists
        id: release_check
        run: |
          if gh release view nightly-windows --repo "${{ github.repository }}" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release does not exist"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Compare versions
        id: compare
        run: |
          if [ "${{ steps.upstream.outputs.hash }}" != "${{ steps.last_built.outputs.last_hash }}" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "✅ New version detected - will build"
          elif [ "${{ steps.release_check.outputs.exists }}" != "true" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "✅ No release exists - will build"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "⏭️ No changes - skipping build"
          fi

  build:
    name: "Citron Build (Windows)"
    needs: [check-version]
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: windows-latest
    timeout-minutes: 120

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Vulkan SDK
        shell: pwsh
        run: |
          $vulkan_sdk_url = "https://sdk.lunarg.com/sdk/download/1.3.283.0/windows/VulkanSDK-1.3.283.0-Installer.exe"
          Invoke-WebRequest -Uri $vulkan_sdk_url -OutFile VulkanSDK-Installer.exe
          Start-Process -FilePath ".\VulkanSDK-Installer.exe" -ArgumentList "--accept-licenses", "--default-answer", "--confirm-command", "install" -Wait
          echo "C:\VulkanSDK\1.3.283.0\Bin" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: Clone Citron Source
        shell: bash
        run: git clone --recursive "https://git.citron-emu.org/citron/emulator.git" citron

      - name: Get Nightly Version
        id: version
        working-directory: ./citron
        shell: bash
        run: |
          git fetch --tags
          VERSION=$(git rev-parse --short HEAD)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Configure CMake
        working-directory: ./citron
        shell: cmd
        run: |
          cmake -B build -S . -G "Visual Studio 17 2022" -A x64 ^
            -DCITRON_USE_BUNDLED_VCPKG=ON ^
            -DCITRON_ENABLE_LTO=ON ^
            -DCITRON_USE_BUNDLED_QT=ON ^
            -DENABLE_QT6=ON ^
            -DCITRON_TESTS=OFF ^
            -DUSE_DISCORD_PRESENCE=ON

      - name: Build Citron
        working-directory: ./citron
        shell: cmd
        run: cmake --build build --config Release --parallel

      - name: Package Windows Build
        shell: pwsh
        run: |
          mkdir dist
          echo "Creating final zip archive (excluding .pdb files)..."
          # Create a temporary directory with only the files we want
          mkdir temp_package
          Get-ChildItem ".\citron\build\bin\Release\" -Recurse | Where-Object { $_.Extension -ne ".pdb" } | ForEach-Object {
            $relativePath = $_.FullName.Replace((Resolve-Path ".\citron\build\bin\Release\").Path, "").TrimStart('\')
            $destPath = Join-Path ".\temp_package" $relativePath
            $destDir = Split-Path $destPath -Parent
            if (!(Test-Path $destDir)) { New-Item -ItemType Directory -Path $destDir -Force | Out-Null }
            Copy-Item $_.FullName $destPath -Force
          }
          Compress-Archive -Path ".\temp_package\*" -DestinationPath ".\dist\Citron-windows-nightly-${{ steps.version.outputs.VERSION }}.zip"
          Remove-Item ".\temp_package" -Recurse -Force

      - name: Upload Windows Build
        uses: actions/upload-artifact@v4
        with:
          name: Citron-Windows-Nightly
          path: "dist/*.zip"

  release:
    if: ${{ github.ref_name == 'main' }}
    name: "Release"
    needs: [check-version, build]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: Citron-Windows-Nightly
          path: .
      - name: Get Version from Filename
        shell: bash
        run: |
          FILENAME=$(ls *.zip)
          VERSION=${FILENAME#Citron-windows-nightly-}
          VERSION=${VERSION%.zip}
          echo "APP_VERSION=${VERSION}" >> $GITHUB_ENV
      - name: Delete Previous Release
        run: gh release delete "nightly-windows" --repo "${{ github.repository }}" --cleanup-tag -y || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Release Artifacts
        uses: softprops/action-gh-release@v2
        with:
          name: "Continuous Build (Windows Nightly: ${{ env.APP_VERSION }})"
          tag_name: "nightly-windows"
          prerelease: true
          files: "*.zip"
          body: |
            **Citron Upstream Commit:** [`${{ needs.check-version.outputs.new_hash }}`](https://git.citron-emu.org/citron/emulator/-/commit/${{ needs.check-version.outputs.new_hash }})
            
            This build is based on the latest Citron emulator source code from the upstream repository.
            
            **Build Details:**
            - Platform: Windows (x64)
            - Build Type: Release with Qt6 and LTO
            - Date: $(date +'%Y-%m-%d')

      - name: Update LATEST_VERSION
        if: success()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          echo "${{ env.APP_VERSION }}" > LATEST_VERSION
          git add LATEST_VERSION
          git commit -m "Update LATEST_VERSION to ${{ env.APP_VERSION }} [skip ci]" || exit 0
          # Pull with rebase and retry push to handle concurrent updates
          for i in {1..5}; do
            git pull --rebase origin main && git push && break || sleep 2
          done

      - name: Post to Discord
        if: success()
        run: |
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/tag/nightly-windows"
          DATE=$(date +'%Y-%m-%d')
          curl -H "Content-Type: application/json" \
               -d "{\"content\":\"🪟 **New Windows Build Available!**\n\n📦 **Version:** \`${{ env.APP_VERSION }}\`\n📅 **Date:** ${DATE}\n🔗 **Download:** $DOWNLOAD_URL\"}" \
               https://discord.com/api/webhooks/1428304731809517588/fG7t7MBprKFss5oGcI05DIFM3JdO41Z0juSV_zOfb9K-UTvyI2fd3-Ciwi48npWXYHLb
